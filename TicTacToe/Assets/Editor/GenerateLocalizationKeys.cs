using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;
using Newtonsoft.Json.Linq;
using System.Linq;

public class GenerateLocalizationKeys : EditorWindow
{
    [MenuItem("Tools/Generate Localization Keys")]
    public static void GenerateKeys()
    {
        string jsonPath = Application.dataPath + "/Resources/Localization/en.json"; 
        string outputPath = Application.dataPath + "/Scripts/Utilities/LocalizationKeys.cs";

        if (string.IsNullOrEmpty(jsonPath))
        {
            Debug.LogWarning("No localization file selected.");
            return;
        }
        if (!File.Exists(jsonPath))
        {
            Debug.LogError("Localization JSON not found at: " + jsonPath);
            return;
        }

        var json = JObject.Parse(File.ReadAllText(jsonPath));
        var sb = new StringBuilder();
        sb.AppendLine("// Auto-generated by GenerateLocalizationKeys");
        sb.AppendLine("public static class LocalizationKeys");
        sb.AppendLine("{");
        GenerateKeysRecursive(json, sb, "    ", "");
        sb.AppendLine("}");

        File.WriteAllText(outputPath, sb.ToString());
        AssetDatabase.Refresh();
        Debug.Log("LocalizationKeys.cs generated!");
    }

    static void GenerateKeysRecursive(JToken token, StringBuilder sb, string indent, string prefix)
    {
        if (token.Type == JTokenType.Object)
        {
            foreach (var prop in ((JObject)token).Properties())
            {
                if (prop.Value.Type == JTokenType.Object)
                {
                    string className = ToValidIdentifier(prop.Name);
                    sb.AppendLine($"{indent}public static class {className}");
                    sb.AppendLine($"{indent}{{");
                    GenerateKeysRecursive(prop.Value, sb, indent + "    ", prefix + prop.Name + ".");
                    sb.AppendLine($"{indent}}}");
                }
                else if (prop.Value.Type == JTokenType.String)
                {
                    string constName = ToValidIdentifier(prop.Name);
                    sb.AppendLine($"{indent}public const string {constName} = \"{prefix + prop.Name}\";");
                }
            }
        }
    }

    static string ToValidIdentifier(string name)
    {
        if (string.IsNullOrWhiteSpace(name)) return "_";
        var sb = new StringBuilder();
        if (!char.IsLetter(name[0]) && name[0] != '_') sb.Append('_');
        foreach (var c in name)
        {
            if (char.IsLetterOrDigit(c) || c == '_') sb.Append(c);
            else sb.Append('_');
        }
        return sb.ToString();
    }
}